---
title: "Functional Programming with Purrr"
subtitle: "FCT Abuja UseR Group, Nigeria"
institute: "Postdoctoral Research Fellow"
date: "16 August 2023"
author: "McEwen Khundi, PhD"
format: revealjs
editor: visual
slide-number: true
---

## What is a functional programming language

In R, this means that you can do many of the things with a function that you can do with a vector: you can assign them to variables, store them in lists, pass them as arguments to other functions, create them inside functions, and even return them as the result of a function.

[Advanced R: Functional programming](https://adv-r.hadley.nz/fp.html#functional-programming-languages)

**The purrr R package provides a convenient toolkit for doing functional programming in R**

[Purrr R package overview page](https://purrr.tidyverse.org/#overview)

# Functions

## Creating functions in R

Functions in R are created by using the keyword function as in the example below:

`tripple_func <- function(x) {`

`x*3`

`}`

A function is made up of arguments, (the text between the parentheses), and the body (the text between the curly brackets).

The last line to be executed is returned

```{r}
tripple_func <- function(x){
  x*3
}
```

```{r, echo=TRUE}
tripple_func(2)
```

## Arguments

Arguments are like variables that we pass to functions when we "call" the function. A function can have no arguments or have many arguments.

::: columns
::: {.column width="40%"}
A function with zero arguments

```{r}
#| code-line-numbers: "|2"
#| echo: true

my_func <- function(){
  3
}
my_func()

```
:::

::: {.column width="60%"}
A function that accepts two arguments

```{r}
#| code-line-numbers: "|2"
#| echo: true

add_two_numbers <- function(x, y){
  x + y
}

add_two_numbers(x = 3, y = 2)

```
:::
:::

## Any number of arguments:

Can accept any number of arguments by using the ... in its parenthesis. In R this is often used to pass arguments that are passed to another function

```{r}
#| code-line-numbers: "|2"
#| echo: true

add_numbers <- function(..., allowmissing = TRUE){
  sum(..., na.rm = allowmissing)
}

add_numbers(1,2,3,4,NA)
```

## Argument/variable scoping

Scoping is how R finds the value of the variables/arguments in functions etc.

::: columns
::: {.column width="50%"}
::: {style="font-size:20px"}
Variables that are defined within the function take precedence
:::

```{r}
#| echo: true
#| code-line-numbers: "2"
x <- 10; y <- 20
g02 <- function(){
  x <- 1
  y <- 2
  c(x, y)
}

#x and y from the function
g02()
```
:::

::: {.column width="50%"}
::: {style="font-size:20px"}
But if a variable is not defined inside a function R looks one level up
:::

```{r}
#| echo: true
#| code-line-numbers: "2"
x <- 2

g03 <- function() {
  y <- 1
  c(x, y)
}
g03()
```
:::
:::

## Default arguments

R functions allow one to provide default arguments at function creation, this entails that the function can be used without specifying the value of the argument at function call

::: columns
::: {.column width="50%"}
::: {style="font-size:20px"}
If the argument with default value is not assigned a value at call, the default value is used
:::

```{r}
#| echo: true
#| code-line-numbers: "1"

my_func <- function(x, y=3) {

x + y

}

my_func(x = 4)
```
:::

::: {.column width="50%"}
::: {style="font-size:20px"}
You can also provide a different value for y, this will override the default value
:::

```{r}
#| echo: true
#| code-line-numbers: "1"
my_func(x = 4, y = 5)
```
:::
:::

## R functions passed as values of arguments to other functions

In R, functions can be passed to other functions, this is possible because in R, functions behave just like variables.

```{r}
#| echo: true

summarise_func <- function(values, fn){
  fn(values)
}

summarise_func(1:8, mean)
summarise_func(1:8, sum)
```

::: {style="font-size:20px"}
Note that, the functions should be passed without parenthesis. Including the parenthesis would force the function to be evaluated first before being passed
:::

## Inspecting the arguments and body of a function in memory

::: columns
::: {.column width="50%"}
::: {style="font-size:20px"}
You can inspect a function's arguments and body by typing the functions name
:::

```{r}
#| echo: true

my_func
```
:::

::: {.column width="50%"}
::: {style="font-size:20px"}
Functions that have "UseMethod" or Primitive in their description do not display a lot of information
:::

```{r}
#| echo: true

#primitive functions
sum
#generic functions
mean

```
:::
:::

# Vectors

## Types of vectors

Vectors are of two main types in R: atomic vectors and lists.

1.  For atomic vectors all elements must have the same type

    -   logical (TRUE, FALSE)

    -   Integer

    -   Double

    -   Character

2.  In lists elements can be of different types

3.  Factors, dates, data frames and tibbles are made from atomic or lists by adding attributes

    [R for Data Science: Vectors](https://r4ds.had.co.nz/vectors.html)

## Example vectors

::: columns
::: {.column width="50%"}
Atomic vectors

```{r}
#| echo: true
lgl_var <- c(TRUE, FALSE)
lgl_var
int_var <- c(1L, 6L, 10L)
int_var
dbl_var <- c(1, 2.5, 4.5)
dbl_var
chr_var <- c("these are", "some strings")
chr_var

```
:::

::: {.column width="50%"}
::: {style="font-size:30px"}
Lists can store different types of elements including other lists
:::

```{r}
#| echo: true
list_vect <- list(1, c(2,4), 
                  int_var, 
                  dbl_var,
                  list(5,7))
list_vect
```
:::
:::

## Adding attributes to vectors (names)

::: {style="font-size:40px"}
You can add attributes to a vector elements such as names
:::

::: columns
::: {.column width="50%"}
::: {style="font-size:30px"}
Two ways of naming a vector's elements
:::

```{r}
#| echo: true
#When creating it
x <- c(a = 1, b = 2, c = 3)
x

#After creation
y <- c(1, 2, 3)
names(y) <- c("a", "b", "c")
y
```
:::

::: {.column width="50%"}
::: {style="font-size:30px"}
Elements of a vector can be accessed by position or names
:::

```{r}
#| echo: true
#by position
y[2]

#by the elements name
y["b"]
```
:::
:::

## Dimension attribute

Another common and important attribute that can be added to vectors is dimensions

::: columns
::: {.column width="50%"}
```{r}
#| echo: true

z <- 1:6
z
dim(z) <- c(3,2)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#dimensions 
dim(z)
#z with 2d dimension
z
```
:::
:::

## Dataframes and tibbles

::: {style="font-size:20px"}
Dataframes/tibbles are built on top of lists.

They are made of a named list, with a constraint that each item is a vector and that each of the items has the same length.
:::

```{r}
#| echo: true
#The iris dataset is part of R
#all the attributes
attributes(iris)

```

## Structure of the iris dataset

```{r}
#| echo: true

str(iris)

```

# Iteration

## Code re-factoring

::: {style="font-size:20px"}
One advantage of coding is that it allows us to reduce repetition of a task. Assume you have a list with 4 elements, imagine you want to compute the median of each element of the list and add 2.

**Never copy and pastes more than twice!** ⚠️
:::

```{r}
#| echo: true
#| output-location: column

set.seed(56)
list_df <- list(a = rnorm(12), 
                b = rnorm(12), 
                c = rnorm(12), 
                d = rnorm(12))

#To compute the median 
#of each element and add 2
median(list_df$a) + 2
median(list_df$b) + 2
median(list_df$c) + 2
median(list_df$d) + 2
```

::: {style="font-size:25px"}
In what ways could we reduce repetitions in the code above

1.  Create a function that takes a vector, gets its median and adds 2.

2.  Use a for loop
:::

## Reducing repetitions

::: {style="font-size:25px"}
Create a function that expects a numeric vector, get's the median and adds two.
:::

```{r}
#| echo: true
median_plus_two <- function(x){
  median(x) + 2
}

#test the function
median_plus_two(list_df$a)
median_plus_two(list_df$b)
median_plus_two(list_df$c)
median_plus_two(list_df$d)

```

::: {style="font-size:25px"}
We still broke the rule of never copying and pasting more than twice 🤦🏽 What other steps can we take 🤷‍♂️
:::

## For loop

::: {style="font-size:25px"}
We can use the for loop
:::

```{r}
#| echo: true

output <- vector("double", length(list_df))  # 1. output
for (i in seq_along(list_df)) {            # 2. sequence
  output[[i]] <- median_plus_two(list_df[[i]])      # 3. body
}
output

```

::: {style="font-size:25px"}
Other improvements would be to turn the above code into a function that takes in a list
:::

```{r}
#| echo: true

median_func <- function(df){
  output <- vector("double", length(df))  # 1. output
for (i in seq_along(df)) {            # 2. sequence
  output[[i]] <- median_plus_two(df[[i]])      # 3. body
}
output
}

# a user now only has to use median_func
median_func(list_df)
```

## Now you would like to compute other summaries: mean(), sd(), max() etc

::: panel-tabset
## Mean

```{r}
#| echo: true

mean_func <- function(df){
  output <- vector("double", length(df))  # 1. output
for (i in seq_along(df)) {            # 2. sequence
  output[[i]] <- mean(df[[i]])      # 3. body
}
output
}

# a user now only has to use median_func
mean_func(list_df)
```

## Standard deviation

```{r}
#| echo: true

sd_func <- function(df){
  output <- vector("double", length(df))  # 1. output
for (i in seq_along(df)) {            # 2. sequence
  output[[i]] <- sd(df[[i]])      # 3. body
}
output
}

# a user now only has to use median_func
sd_func(list_df)
```

## Maximum

```{r}
#| echo: true

max_func <- function(df){
  output <- vector("double", length(df))  # 1. output
for (i in seq_along(df)) {            # 2. sequence
  output[[i]] <- max(df[[i]])      # 3. body
}
output
}

# a user now only has to use median_func
max_func(list_df)
```
:::

::: {style="font-size:25px"}
Oops! We have violated the the rule of copying and pasting 😅
:::

# Functionals

## Remember that a function can be passed as an argument in R 🤩

```{r}
#| echo: true

summary_func <- function(df, fun) {
  out <- vector("double", length(df))
  for (i in seq_along(df)) {
    out[i] <- fun(df[[i]])
  }
  out
}

summary_func(list_df, mean)
summary_func(list_df, sd)
summary_func(list_df, max)
```

::: {style="font-size:25px"}
The idea of passing a function to another function is an extremely powerful idea, that makes R a functional programming language 👌🏽
:::

::: {style="font-size:25px"}
The above function can also accept data.frames ✌️
:::

## Purrr::map()

The purrr r package provides functions that aid making iteration code succinct by avoiding the explicit use of for loops

The **map( )** function is similar to the **summary_fun( )** that we have just seen on the previous slide. But **map( )**, is written in C, can take any number of arguments and supports use of short functions (anonymous functions)

```{r}
#| echo: true

#Purrr package is part of the tidyverse
library(tidyverse)

```

## Map function

The function map, takes as argument the vector (data) you want to iterate over and a function that you want to to evaluate on each item of the input.

::: columns
::: {.column width="40%"}
![(image from Advanced-R, CC-BY-NC-SA 4.0)](images/Screenshot%202023-08-12%20at%209.45.08%20AM.png)
:::

::: {.column width="60%"}
```{r}
#| echo: true

results_mean_list <- map(list_df, mean)
results_mean_list

```
:::
:::

## Variants of map for specific output

::: {style="font-size:30px"}
Most times it is much better for map to return a simpler vector than a list type

-   map_lgl(), logical vector

-   map_int(), integer vector

-   map_dbl(), double vector

-   map_chr(), character vector
:::

```{r}
#| echo: true

#get a vector of numerical values
map_dbl(list_df, mean)

#get a vector of character values
map_chr(list_df, class)
```

## Anonymous functions

::: {style="font-size:30px"}
Remember the median_plus_two function
:::

```{r}
#| echo: true
median_plus_two
```

::: {style="font-size:30px"}
When a function is short as this, you can create an anonymous function within map
:::

```{r}
#| echo: true

map_dbl(list_df, function(x){ median(x) + 2})
```

::: {style="font-size:30px"}
Starting with R 4.10, R now has a shortcut for anonymoous functions
:::

```{r}
#| echo: true

map_dbl(list_df, \(x){ median(x) + 2})
```

## Passing arguments to a function in map

::: {style="font-size:30px"}
How to pass arguments to a function that expects more than one argument
:::

::: columns
::: {.column width="40%"}
![(image from Advanced-R, CC-BY-SA 4.0)](images/Screenshot%202023-08-12%20at%2010.48.18%20AM.png)
:::

::: {.column width="60%"}
```{r}
#| echo: true

median_add_num <- function(x, y){
  median(x) + y
}

#Add 4 to the median of each element
map_dbl(list_df, median_add_num, 4)

#It is good practice to specify
#the argument name
map_dbl(list_df, median_add_num, y = 4)
```
:::
:::

## Using map with dataframes

::: {style="font-size:30px"}
Using map with dataframes will run the function against each column (variable).

Note: a dataframe is a list underneath
:::

::: columns
::: {.column width="60%"}
```{r}
#| echo: true

#check
class(list_df)

#convert the list_df to a dataframe/tibble
tibble_df <- as_tibble(list_df)

#check the new class
class(tibble_df)

#underlying vector type
typeof(tibble_df)

tibble_df

```
:::

::: {.column width="40%"}
```{r}
#| echo: true

#mean of each column
map_dbl(tibble_df, mean)

#class of each column
map_chr(tibble_df, class)
```
:::
:::

## The penguis dataset

[more about the palmerpenguins](https://allisonhorst.github.io/palmerpenguins/)

```{r}
#| echo: true
#install.packages("palmerpenguins")

library(palmerpenguins)
data(package = 'palmerpenguins')

#explore the dataset
gt::gt(head(penguins))
```

## Calculate some summaries for each column of the penguins dataset

```{r}
#| echo: true

#class of each column
penguins %>%
  map_chr(class)

#Number of unique values in each column
penguins |>
  map(unique) |>
  map_dbl(length)

```

## Conditional map

Since penguins dataset has other non-numeric variables, we need a conditional map 😅

```{r}
#| echo: true

map_if(penguins, is.numeric, mean, na.rm = T)

```

## Note dplyr has better options for achieving the previous map use

```{r}
#| echo: true
penguins |>
  summarize(across(where(is.numeric), mean, na.rm = TRUE))

#Can also do it by species of penguis
penguins |>
  group_by(species) |>
  summarize(across(where(is.numeric), mean, na.rm = TRUE))


```

## Example of reading multiple files

Imagine that each of the species of penguin are in a separate csv file present in the data folder

```{r}
#| echo: true

dir("data")

files <- dir("data")

#Read in the separate species of penquis
map(here::here("data",files), read_csv)
```

## Dataframe variant of map

The output of map is a list, in this case all the files are of the same structure, we might want to turn this into a single data frame.

map_dfr function returns a dataframe by binding all rows

```{r}
#| echo: true

map_dfr(here::here("data",files), read_csv) 
```

## More variants of map

::: {style="font-size:30px"}
Like we have seen map has so many variants some of which we have not explored in this session.

For instance if you have a function that takes two vectors there is map2
:::

```{r}
#| echo: true

map2(1:3, 5:7, \(x,y){x + y})
```

::: {style="font-size:30px"}
See the references below to explore other map variants:

-   [R for Data Science: 21 Iteration](https://r4ds.had.co.nz/iteration.html)

-   [Advanced R: 9 Functionals](https://adv-r.hadley.nz/functionals.html)
:::

## Base R map functions

The apply family of function in base R do similar tasks as the purrr functions

-   apply, lapply are similar to map

-   sapply, vapply most similar to the map\_\* functions but are more verbose

The purrr functions are more consistent, once you master one it is easier to use the rest and they are also well documented

## Summary

## Acknowledgements and references

Thanks for attending ! 👏🏽👏🏽👏🏽👏🏽

::: {style="font-size:30px"}
The slides can be downloaded at: <https://github.com/mcewenkhundi/functionalpurrr>

The slides were inspired by a talk that Tom Jemmett gave at [NHS-R Community](https:://github.com/NHS-R-Community/Webinars/)

**Books**

-   [R for Data Science: 21 Iteration](https://r4ds.had.co.nz/iteration.html)

-   [R for Data Science: 20 Vectors](https://r4ds.had.co.nz/vectors.html)

-   [Advanced R: 9 Functionals](https://adv-r.hadley.nz/functionals.html)

-   [Dplyr documentation for columnwise operations](https://dplyr.tidyverse.org/articles/colwise.html)

-   [Package Purrr documentation](https://purrr.tidyverse.org/)
:::
